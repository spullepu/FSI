skinparam headerFontSize 40
skinparam HeaderFontColor black
'header Mobile Payments (Happy Path)
skinparam sequence {
    ArrowColor black
    LifeLineBorderColor black
    LifeLineBackgroundColor black
    LifeLineBorderColor black
    LifeLineBackgroundColor #ffbd00

    'ParticipantBorderColor #lightgreen
    'ParticipantBackgroundColor #lightgreen
    ParticipantFontName "Arial"
    ParticipantFontSize 17
    ParticipantFontColor black
    'ParticipantMargin 30 '\n Heritage service

    ActorBorderColor black
    ActorBackgroundColor #black
}

autonumber 1
box "Mobile\nDevice"
participant "App" as a
participant "Realm DB" as realm #lightgreen
end box
box "microservice"
participant "API" as b 
participant "state db" as microdb #lightgreen
end box
'participant "Kafka/Azure Event Hub/AWS Kiensis " as c
'box "Databricks" '#LightSlateGray
'box "Databricks" 
'participant "mlFlow" as f
'participant "Delta Lake" as g
'end box
'participant "Fraud Monitoring" as h

'participant "Atlas:ODS" as d #lightgreen 

'participant "Realm Sync App" as e #lightgreen 

activate a
a->realm: record\npayment request
deactivate a
activate b
a->b: : initiate payment\nlong running\ntransaction
b->microdb: long running\ntransaction state
deactivate b
b-->backend: initiate payment
backend->DB2
participant "ODL" as ODL #lightgreen
DB2->ODL
activate b
ODL->b
b->microdb: device sync
deactivate b

microdb-->realm
realm-->a: UI update

'b->c: new trasnsaction event
'c-[#blue]>g: insert raw transactions
'activate g

'g->g: Geospatial clustering 
'g->g: determine user behaviour
'g-[#green]>d: insert user behavior data
'c-[#blue]>f: insert raw transactions

'deactivate g
'note left: 3 & 7 are parallel activities

'activate f

'f->f: update model, generate new reference data points
'f-[#green]>d: periodically push new reference data \n import com.mongodb.spark._
'f->d: find if there is a match \n db.tiles.find({"user": "Antoine", "tile": "8A2A1008916FFFF"})
'deactivate f
'alt  if there is a match (transaction is fraudulent)
'd->h: trigger change stream 
'h->h: create a case

'd->e:  trigger change stream
'e->a: transaction failed message
'end




